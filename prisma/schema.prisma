// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  listings      Listing[]
  reviews       Review[]
  questions     Question[]
  favorites     Favorite[]
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  age         Int
  city        String
  neighborhood String?  // NEW: Bairro
  description String?
  bio         String?
  location    String?
  phone       String?
  whatsappEnabled Boolean @default(false) // NEW: WhatsApp toggle
  telegramEnabled Boolean @default(false) // NEW: Telegram toggle
  gender      String?
  preference  String?
  weight      String?
  height      String?
  ethnicity   String?
  eyeColor    String?
  hair        String?
  shoeSize    String?
  silicone    String?
  tattoos     String?
  piercings   String?
  smoker      String?
  languages   String?
  bodyType    String?   // NEW: Body type
  hairColor   String?   // NEW: Hair color
  breastSize  String?   // NEW: Breast size
  breastType  String?   // NEW: Breast type
  personalityTags String[] // NEW: Personality tags
  isVerified  Boolean   @default(false)
  isOnline    Boolean   @default(false)
  rating      Float     @default(0)
  profilePhoto String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reviews     Review[]
  media       Media[]
}

model Listing {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float?
  location    String
  city        String
  age         Int
  phone       String
  services    String?
  status      ListingStatus @default(ACTIVE)
  isPremium   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      Image[]
  media       Media[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Image {
  id          String    @id @default(cuid())
  url         String
  listingId   String
  listing     Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  authorName  String?
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Media {
  id          String    @id @default(cuid())
  url         String
  type        MediaType
  profileId   String?
  profile     Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  listingId   String?
  listing     Listing?  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Question {
  id          String    @id @default(cuid())
  question    String
  answer      String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Favorite {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId   String
  createdAt   DateTime  @default(now())
}

enum Role {
  USER
  ESCORT
  ADMIN
}

enum MediaType {
  PHOTO
  VIDEO
  IMAGE
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  FINISHED
} 